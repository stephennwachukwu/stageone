trigger:
  - main

pool:
  name: 'coreone-xpool01EUS' 

variables:
  repositoryName: 'stage-go-api'
  GOVERSION: '1.21.1'
  # Link to variable group
  group: 'go-api-variables'

resources:
  repositories:
    - repository: self
      trigger:
        branches:
          include:
            - main

stages:
- stage: Build
  jobs:
  - job: RunTests
    displayName: 'Run Go Tests'
    steps:
    # Install build essentials
    # - script: |
    #     sudo apt-get update
    #     sudo apt-get install -y build-essential gcc make
    #   displayName: 'Install Build Essentials'
      
    # Setup Go with specific version
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
      displayName: 'Install Go $(GOVERSION)'
    
    # Download Go dependencies
    - script: |
        go mod download
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Download Dependencies'
    
    # Run tests
    - script: |
        go test -v ./...
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Run Go Tests'
    
    # Verify Docker is available
    - script: |
        docker --version
      displayName: 'Verify Docker Installation'
    
    # Build and push Docker image
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'acrone'
        repository: '$(repositoryName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure Web App'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Container to Azure Web App'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              appName: '$(WEBAPP_NAME)'
              containers: 'appservice/$(repositoryName):$(Build.BuildId)'
              appSettings: |
                -WEBSITES_PORT=8087
                -WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

          # Add health check after deployment
          - script: |
              echo "Waiting for deployment to stabilize..."
              sleep 30  # Give the container time to start
              
              # Check if the application is responding
              response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/)
              if [ "$response" = "200" ]; then
                echo "Deployment successful! Application is responding."
              else
                echo "Warning: Application might not be fully started. Status code: $response"
                echo "Please check the application logs in Azure Portal."
              fi

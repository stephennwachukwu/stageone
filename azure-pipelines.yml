trigger:
  - main

pool:
  name: 'coreone-xpool01EUS' 

variables:
  # Container Registry Variables
  repositoryName: 'stage-go-api'
  GOVERSION: '1.21.1'  # Using a more recent version of Go
  # Link to variable group
  # group: 'go-api-variables'

resources:
  repositories:
    - repository: self
      trigger:
        branches:
          include:
            - main

stages:
- stage: Build
  jobs:
  - job: RunTests
    displayName: 'Run Go Tests'
    steps:
    # Install build essentials
    - script: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc make
      displayName: 'Install Build Essentials'
      
    # Setup Go with specific version
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
      displayName: 'Install Go $(GOVERSION)'
    
    # Download Go dependencies
    - script: |
        go mod download
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Download Dependencies'
    
    # Run tests
    - script: |
        go test -v ./...
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Run Go Tests'
    
    # Install Docker
    - task: DockerInstaller@0
      displayName: 'Install Docker'
      inputs:
        dockerVersion: '20.10.x'
        releaseType: 'stable'
    
    # Build and push Docker image
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'acrone'
        repository: '$(repositoryName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

# - stage: Deploy
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeployToAzure
#     environment: 'production'
#     pool:
#       vmImage: 'ubuntu-latest'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebAppContainer@1
#             inputs:
#               azureSubscription: '$(AZURE_SUBSCRIPTION)'
#               appName: '$(WEBAPP_NAME)'
#               containers: '$(containerRegistry)/$(repositoryName):$(Build.BuildId)'
#               appSettings: |
#                 -WEBSITES_PORT=8087